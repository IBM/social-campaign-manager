NODE_ENV=dev

# It isn't necessary to provide the Twitter credentials to start the app
# but it is recommended to get the most out of the Social Campaign Manager
# To get tokens follow documentation in docs/ folder
TWITTER_CONSUMER_KEY=YOUR-TWITTER-CONSUMER-KEY
TWITTER_CONSUMER_SECRET=YOUR-TWITTER-CONSUMER-SECRET
TWITTER_ACCESS_TOKEN_KEY=YOUR-TWITTER-ACCESS-TOKEN-KEY
TWITTER_ACCESS_TOKEN_SECRET=YOUR-TWITTER-ACCESS-TOKEN-SECRET
TWITTER_USER_ID=YOUR-TWITTER-USER-ID

# Twitter webhook is secure by default. Set to false only if you know what you're doing
# SECURE_TWITTER_WEBHOOK=true

# Application integrates a mock Twitter service used only for testing purposes
# MOCK_TWITTER_SERVICE=false
# MOCK_TWITTER_RESPONSE_TIMEOUT=1000

# Twitter Dev tool configuration
# CLOUD_BASE_URL='https://YOUR-APPLICATION-NAME.eu-gb.mybluemix.net'
# TWITTER_APP_ENVIRONMENT=your-dev-environment-name

# The application can disable the front-end leaving API endpoints only
DISABLE_FRONTEND=false

# Disabling campaign form leaves only the #/chat/ca-mpa19n-1d route in the front-end
# for direct chat access. All campaign edit forms will not be accessible
# It it required to `npm run build` the app after changing this setting
CAMPAIGN_FORM_ENABLED=true

# Disable authentication. The existing authentication implementation is only an example.
# Sample authentication uses Passport.js and an IBM Strategy 
AUTHENTICATION=false

# To get Slack tokens create an app at: https://api.slack.com/apps and install it into your workspace
SLACK_SIGNING_SECRET=[FROM_APP_BASIC_INFO_PAGE]
SLACK_BOT_TOKEN=[FROM_OAUTH_PAGE_AFTER_INSTALLATION_IN_WORKSPACE]

# Disable user response sender id encryption by setting the key below to false
# USE_ENCRYPTION=false
